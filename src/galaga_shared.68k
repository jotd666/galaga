	.global		read_ixl_into_d0
	.global		read_ixh_into_d0
	.global		write_videoram_to_a1
	.global		read_videoram_from_a1
	.global		write_videoram_to_a0
	.global		read_videoram_from_a0

	.global		rst_08_d5d6
	.global		rst_18
	.global		rst_18_color
	.global		rst_18_video
	.global		add_d0_to_a0_0010
	.global		add_2_times_d0_to_a0_0008
	.global		add_4_times_d0_to_a0_0008
	.global		rst_20
	.global		rst_28
	
	.global		cpi
	.global		ldi
	.global		ldd
	.global		ldir
	.global		lddr
	.global		lddr_video
	.global		rrd
	.global		rld

	.include	"m68k_macros.inc"
	
*
* < A0 (HL)
* < D0 (A)
* Performs a 4-bit leftward rotation of the 12-bit number whose
* 4 most signigifcant bits are the 4 least significant bits of A,
* and its 8 least significant bits are in (HL).
*; assume W,X,Y,Z are the set of all possible hex values 0-F
*ld A,$WX
*ld (HL),$YZ
*RLD
* A = $WY
* (HL) = $ZX

* < A0 (HL)
* < D0 (A)
rld:
    movem.w    d1/d2,-(a7)
    move.b    d0,d1        | backup A
    clr.w    d2            | make sure high bits of D2 are clear
    move.b    (a0),d2      | read (HL)
    and.b #0xF,d1          | keep 4 lower bits of A
    lsl.w    #4,d2         | make room for 4 lower bits
    or.b    d1,d2          | insert bits
    move.b    d2,(a0)      | update (HL)
    lsr.w    #8,d2         | get 4 shifted bits of (HL) back
    and.b    #0xF0,d0      | keep only the 4 highest bits of A
    or.b    d2,d0          | insert high bits from (HL) into first bits of A
    movem.w    (a7)+,d1/d2
    rts

* < A0 (HL)
* < D0 (A)
* Performs a 4-bit rightward rotation of the 12-bit number whose
* 4 most signigifcant bits are the 4 least significant bits of A,
* and its 8 least significant bits are in (HL).
*; assume W,X,Y,Z are the set of all possible hex values 0-F
*ld A,$WX
*ld (HL),$YZ
*RRD
* A = $WZ
* (HL) = $XY
rrd:
	illegal   | needs to be properly debugged
	movem.w	d1/d2,-(a7)
	move.b	d0,d1		| backup A
	clr.w	d2			| make sure high bits of D2 are clear
	move.b	(a0),d2		| read (HL)
	and.b #0xF0,d1		| keep 4 upper bits of A
	lsr.w	#4,d2		| make room for 4 lower bits
	or.b	d1,d2		| insert bits
	move.b	d2,(a0)		| update (HL)
	lsl.w	#8,d2		| get 4 shifted bits of (HL)
	and.b	#0xF,d0		| keep only the 4 lowest bits of A
	or.b	d2,d0		| insert lowest bits from (HL) into first bits of A
	movem.w	(a7)+,d1/d2
	rts
* < A0: source (HL)
* < A1: destination (DE)
* < D1: decremented (16 bit)
ldd:
    move.b    (a0),(a1)
    subq.w  #1,a0
    subq.w  #1,a1
    subq.w    #1,d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: decremented (16 bit)
ldi:
    move.b    (a0)+,(a1)+
    subq.w    #1,d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts
	
* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
lddr:
    subq.w    #1,d1
0:
    move.b    (a0),(a1)
    subq.w  #1,a0
    subq.w  #1,a1
    dbf        d1,0b
    clr.w    d1
    rts

* < A0: source (HL)
* < A1: destination (DE) (video memory)
* < D1: length (16 bit)
lddr_video:
	move.w	d0,-(a7)
    subq.w    #1,d1
	exg		d7,a1
0:
    move.b    (a0),d0
	jbsr	osd_w_videoram
    subq.w  #1,a0
    subq.w  #1,d7
    dbf        d1,0b
    clr.w    d1
 	exg		d7,a1
	move.w	(a7)+,d0
    rts

* < A0: source (HL)
* < D1: decremented
* > D0.B value searched for (A)
* > Z flag if found
* careful: d1 overflow not emulated
cpi:
    subq.w    #1,d1
    cmp.b    (a0)+,d0
    rts


write_videoram_to_a1:
	exg	d7,a1
	jbsr	osd_w_videoram
	exg	d7,a1
	rts
	
read_videoram_from_a1:
	exg	d7,a1
	jbsr	osd_r_videoram
	exg	d7,a1
	rts

write_videoram_to_a0:
	exg	d7,a0
	jbsr	osd_w_videoram
	exg	d7,a0
	rts
	
read_videoram_from_a0:
	exg	d7,a0
	jbsr	osd_r_videoram
	exg	d7,a0
	rts



*=============================================================================
* RST_08()
*  Description:
*   A0 += 4*D0
* IN:
*  ...
* OUT:
*  ...
*-----------------------------------------------------------------------------

add_4_times_d0_to_a0_0008:
	and.w	#0xFF,d0
	add.w	d0,d0
	add.w	d0,d0
	add.w	d0,a0
	rts
	
*=============================================================================
* RST_08()
*  Description:
*   A0 += 2*D0
* IN:
*  ...
* OUT:
*  ...
*-----------------------------------------------------------------------------

add_2_times_d0_to_a0_0008:
	and.w	#0xFF,d0
	add.w	d0,d0
	add.w	d0,a0
	rts
	
*=============================================================================
* RST_08()
*  Description:
*   HL += 2*A (as D5/D6)
* IN:
*  ...
* OUT:
*  ...
*-----------------------------------------------------------------------------
rst_08_d5d6:
	add.b	d0,d0                            	| [add  a,a]
	jcc	rst_10_d5d6                            	| [jr   nc,_RST_10]
	addq.b	#1,d5                           	| [inc  h] when?
	jra	rst_10_d5d6                            	| [jp   _RST_10]

*.org 0x0010

add_d0_to_a0_0010:
	and.w	#0xFF,d0
	add.w	d0,a0
	rts

	
*=============================================================================
* RST_10()
*  Description:
*   HL += A
* IN:
*
* OUT:
*  ...
*-----------------------------------------------------------------------------
rst_10_d5d6:
	LOAD_D5_16_FROM_D5D6
	and.w	#0xFF,d0
	add.w	d0,d5
	LOAD_D5D6_FROM_D5_16
	   	| [add  a,l]
	  	| [ld   l,a]
	   	| [...]
	 	| [ret  nc] [...]
	  	| [inc  h] when?
	rts                                    	| [ret]

*.org 0x0018

*=============================================================================
* RST_18()
*  Description:
*   Is not referenced by rst (when does this get used? - same as sub2 ROM)
* IN:
*  ...
* OUT:
*  ...
*-----------------------------------------------------------------------------
rst_18:
	move.b	d0,(a0)+                         	| [ld   (hl),a]                           	| [inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	rst_18                            	| [djnz _RST_18]
	rts                                    	| [ret]

rst_28:
	lea	ds_bug_motion_que_9100,a0           	| [ld   hl,#ds_bug_motion_que_9100] memset(..., 0, $F0)
	move.b	#0xF0,d1                        	| [ld   b,#0xF0]
	clr.b	d0                               	| [xor  a] A==00
	jbsr	rst_18                            	| [rst  0x18] memset((HL), A=fill, B=ct)
	rts                                    	| [ret]

rst_18_video:
* memset((HL), A=fill, B=ct)
	exg		a0,d7
0:
	jbsr	osd_w_videoram
	addq.w	#1,d7
	subq.b	#1,d1
	bne.b	0b
	exg		a0,d7
	rts

rst_18_color:
	exg		a0,d7
* memset((HL), A=fill, B=ct)
0:
	jbsr	osd_w_colorram
	addq.w	#1,d7
	subq.b	#1,d1
	bne.b	0b
	exg		a0,d7
	rts

rst_20:
	sub.w	#0x20,a1
	rts
	