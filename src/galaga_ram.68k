	.global	bg_videoram
	.global	bg_colorram
	.global infinite_lives_flag
	.global perfect_challenge_stage_flag
	.global invincible_flag
	.global start_level
	.global vb_ticks_count
	.global break_at_startup_flag
	.global log_ptr
	.global highscore_needs_saving_flag
	.global capture_up_sound_playing
	
	.ifdef   __amiga__
	.ascii	"RAM_STRT"
	.ifndef	RELEASE
	* easier to debug game to have memory aligned on 0x10000 plus 0x8000
	* so addresses MSB match real game
	* (alignment is done on "amiga.68k" end of text section else it doesn't work)
	* wastes up to 80k but worth it when developping the game
	* for instance
	* lea	lives_counter_p1_8814,a0       	| [ld   hl,lives_counter_p1_8814]
    * disassembles in raw WinUAE disassembler to
	* 0011b6ee 41fa d124                lea.l (pc,$d124) == $00118814,a0 ($8814 LSW matches!)
	*

	ds.b	0x8000-2		| for some reason, there's a 2 byte shift, let's make up for it
	.endif
	.else
	* Neogeo: needs different writable section from ROM code
    .bss
	.endif

	.align	2


bg_videoram:
CHARACTER_RAM:						| $8000
	ds.b	0x400
bg_colorram:
ATTRIBUTE_RAM:						| $8400
	ds.b	0x400
	
*VARIABLES_START:
	.include	"galaga_game_ram.68k"
*VARIABLES_END:


	ds.b	2
sprite_ram_8FF2:
	ds.b	6*2

	ds.b	2
sprite_ram_9022:
	ds.b	6*2
vbl_sync_counter_start_screen:
	.word	0
high_score_beaten:
	.word	0
stack_top:
	.long	0
	

log_ptr:
	dc.l	0x100
capture_up_sound_playing:
	.byte	0
invincible_flag:
	.byte	0
infinite_lives_flag:
	.byte	0
perfect_challenge_stage_flag:
	.byte	0
highscore_needs_saving_flag:
	.byte	0
vb_ticks_count:
	.byte	0
current_ticks_count:
	.byte	0
vbl_sync_flag:
	.byte	0
vbl_sync_counter:
	.byte	0
break_at_startup_flag:
	.byte	0

start_level:
	.byte	0
	.ascii	"RAM_END!"
