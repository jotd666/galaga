
	.global	bg_videoram_8000
	.global	bg_colorram_8400
	.global		ds_8800_RAM0
	.global		object_states_8800
	.global		ds_8920
	.global		ds_89E0
	.global		b_8A00
	.global		b_best5_score_8a20
	.global		b_best5_score1_8a20
	.global		b_best5_score2_8a26
	.global		b_best5_score3_8a2c
	.global		b_best5_score4_8a32
	.global		b_best5_score5_8a38
	.global		b_best5_name1_8a3e
	.global		b_best5_name2_8a41
	.global		b_best5_name3_8a44
	.global		b_best5_name4_8a47
	.global		b_best5_name5_8a4a
	.global		ds_sprite_code_8B00
	.global		mrw_sprite_code_8B00
	.global		sfr_sprite_code_8B80
	.global		ds_9000_RAM1
	.global		ds_cpu0_task_actv_9000
	.global		ds_cpu1_task_actv_9020
	.global		ds_stk_cpu0_init
	.global		ds_stk_cpu1_init
	.global		ds_9100
	.global		ds_tmp_9100
	.global		b_svc_test_inp_buf
	.global		ds_atk_wav_tmp_buf_9100
	.global		ds_bug_motion_que_9100
	.global		ds_9200
	.global		ds_glbls_9200
	.global		b8_game_state_9201
	.global		b_flip_screen_9215
	.global		b_obj_collsn_notif_9200
	.global		b_svc_test_snd_slctn
	.global		b_svc_eastregg_keyprs_cnt
	.global		w_svc_15sec_tmr
	.global		b_9280
	.global		ds8_9280_tmp_IO_parms
	.global		ds3_9288_tmp_IO_data
	.global		p_attrmode_sptiles_9280
	.global		pdb_demo_fghtrvctrs_9282
	.global		b_bugs_flying_cnt_9286
	.global		b_bugs_flying_nbr_9287
	.global		b_bug_flyng_hits_p_round_9288
	.global		b_bug_que_idx_9289
	.global		ds5_captr_status_928a
	.global		ds_bug_collsn_hit_mult_9290
	.global		b_92A0
	.global		ds3_frame_cts_92A0
	.global		b_bugs_actv_cnt_92a6
	.global		b_bugs_actv_nbr_92a7
	.global		w_bug_flying_hit_cnt_92a8
	.global		ds4_game_tmrs_92ac
	.global		b_92B0
	.global		b_92C0
	.global		bmbr_boss_pool_92ca
	.global		b_CPU1_in_progress_92d6
	.global		b_CPU2_in_progress_92d7
	.global		pb_attk_wav_IDs_92e0
	.global		b_92E2
	.global		ds_sprite_posn_9300
	.global		mrw_sprite_posn_9300
	.global		sfr_sprite_posn_9380
	.global		ds_RAM2_9800
	.global		ds_hpos_spcoords_9800
	.global		ds_plyr_data_9820
	.global		ds_plyr_actv_9820
	.global		ds_plyr_susp_9860
	.global		ds_susp_plyr_obj_data_98b0
	.global		ds_cpu0_task_resrv_98e0
	.global		ds_hpos_loc_offs
	.global		ds_hpos_loc_orig_9900
	.global		ds10_9920
	.global		ds_mchn_cfg_9980
	.global		w_mchn_cfg_bonus_9980
	.global		b_mchn_cfg_nships_9982
	.global		b_mchn_cfg_cab_type_9983
	.global		b_mchn_cfg_rank_9984
	.global		b16_tmp_99b0
	.global		ds3_X3attackcfg_99b0
	.global		b8_X3attackcfg_ct_99b0
	.global		b8_X3attackcfg_parm0_99b1
	.global		b8_X3attackcfg_parm1_99b2
	.global		b8_two_plyr_game_99b3
	.global		b8_bugnest_onoff_scrn_tmr_99b4
	.global		ds3_io_input_99b5
	.global		b8_credit_cnt_99b8
	.global		ds_star_ctrl_99b9
	.global		b8_ship_collsn_detectd_status_99bf
	.global		ds_new_stage_parms_99c0
	.global		ds20_99E0
	.global		ds10_mchn_data_99e0
	.global		b16_ttl_plays_bcd_99e0
	.global		b32_sum_score_bcd_99e2
	.global		b32_gametime_secs_bcd_99e6
	.global		b16_bonus_ct_bcd_99ea
	.global		b_9A00
	.global		b_9A30
	.global		b_9A60
	.global		b_9A70
	.global		b_9A80
	.global		b_9AA0
	.global		b_9AC0
	.global		ds_9AA0
	.global		ds_hpos_loc_offs_9900
	.global		_stack_cpu_sub2
	.global		ds_sprite_ctrl_9B00
	.global		mrw_sprite_ctrl_9B00
	.global		sfr_sprite_ctrl_9B80
	.global		ds2_stg_chllg_rnd_attrib_9284


*.area MRW (abs,ovr)
*.org $8800

bg_videoram_8000:					| $8000
	.skip	0x400
bg_colorram_8400:						| $8400
	.skip	0x400



object_states_8800:
       .skip     0x40 * 2   | $40 elements

       .skip     0x80       | unused
* 8900
       .skip     0x20       | unused

ds_8920:
       .skip     0xC0       | $56 bytes used

*ds_89E0:
       .skip     0x20       | data for CPU sub-1 f_0ECA (the unused mystery task)


b_8A00:

b_best5_score_8a20:

b_best5_score1_8a20:
       .skip     0x06
b_best5_score2_8a26:
       .skip     0x06
b_best5_score3_8a2c:
       .skip     0x06
b_best5_score4_8a32:
       .skip     0x06
b_best5_score5_8a38:
       .skip     0x06

* Top5 Table names
b_best5_name1_8a3e:
       .skip     0x03       | 1st score initials
b_best5_name2_8a41:
       .skip     0x03       | 2st score initials
b_best5_name3_8a44:
       .skip     0x03       | 3st score initials
b_best5_name4_8a47:
       .skip     0x03       | 4st score initials
b_best5_name5_8a4a:
       .skip     0x03       | 5st score initials

       .skip     0x03       | unused (8A4D)
       .skip     0xB0       | unused (8A50)
ds_sprite_code_8B00:

mrw_sprite_code_8B00:
       .skip     0x0040     | sprite code/color l (buffer)
       .skip     0x0040     | sprite code/color h (buffer)
sfr_sprite_code_8B80:
     .skip     0x0040     | sprite code/color l ("video" registers) 0x8B80
     .skip     0x0040     | sprite code/color h ("video" registers) 0x8BC0

	.skip	0x400		| TODO fix this gap

*=============================================================================
* RAM1
* Description:
*   $0400 bytes, $9000
*-----------------------------------------------------------------------------

*.area MRW (abs,ovr)
*.org $9000


ds_cpu0_task_actv_9000:
       .skip     0x20

ds_cpu1_task_actv_9020:
       .skip     0x08

       .skip     0x08       | unused

	.align	2
       .skip     0x70       | stack_cpu_0 (about $30 bytes max) not used
*ds_stk_cpu0_init:
       .skip     0x60       | stack_cpu_1 (about $18 bytes max) not used in the amiga version
*ds_stk_cpu1_init:


* temp variables that are generally outside the scope of the game proper.
ds_9100:

* temp variables for romtest mgr


ds_tmp_9100:


ds_atk_wav_tmp_buf_9100:
*       .skip     0x10       | temp array for c_25A2 ($0100 boundary)

* temp array for Test_menu_proc


* Object movement structures... cpu_sub_1:IX
* Assumes alignment on $0100 boundary.
*  00-07 writes to 92E0, see _2636
*  08-09 ptr to data in cpu-sub-1:4B
*  0D    counter
*  10    index/offset of object .... i.e. 8800 etc.
*  11
*  13
ds_bug_motion_que_9100:
       .skip     0x14*12  | 12 object data structures (total size $F0)

       .skip     0x10       | 91F0 unused


*-----------------------------------------------------------------------------
* generic symbol is appropriate for a few references, and unused space clearly
* shown
*-----------------------------------------------------------------------------
*ds_9200:
*      .skip     0x60
*      .skip     0x10       | unused

b_obj_collsn_notif_9200:
ds_glbls_9200:
       .skip     0x01
*_b_9217
       .skip     0x01


       .skip     0x60       | even bytes ($30 elements)
       .skip     0x8       | unused



*b_svc_test_snd_slctn:
*       .skip     0x01
*b_svc_eastregg_keyprs_cnt:
*       .skip     0x01
*w_svc_15sec_tmr:
*       .skip     0x02
*
*       .skip     0x0C       | unused


b_9280:

*-----------------------------------------------------------------------------
* first take care of temp variables

*ds8_9280_tmp_IO_parms:
*       .skip     0x08       | unused
*ds3_9288_tmp_IO_data:
*       .skip     0x01

*-----------------------------------------------------------------------------

	.align	2
*-----------------------------------------------------------------------------
p_attrmode_sptiles_9280:
	.skip    2       | persistent pointer to static sprite tile data for demo (parameter to _sprite_tiles_displ)
pdb_demo_fghtrvctrs_9282:
	.skip     2       | f_ship_demo_controls_1700, tracks state of demo mode by setting an offset to the data table
ds2_stg_chllg_rnd_attrib_9284:   | attributes selected for hit all 8 bonus on challenge round convoy i.e. score, sprite tile
       .skip     0x01       | hit-count, add to collsn_hit_mult[0x0F]
       .skip     0x01       | sprite code and collision flag, ld to obj_collsn_notif[L]
b_bugs_flying_cnt_9286:
       .skip     0x01       | count of flying pests in flite-q (current frame)
b_bugs_flying_nbr_9287:
       .skip     0x01       | nbr of flying pests in flite-q (previous frame)

b_bug_flyng_hits_p_round_9288:
       .skip     0x01
b_bug_que_idx_9289:
       .skip     0x01       | cpu1:f_08D3 local loop counter

ds5_captr_status_928a:
       .skip     0x05       | [0] status of tractor beam
                            * [1] status of rescued ship (counter while ship is positioned into collective)
                            * [2] status of rescued ship
                            * [3] status of boss that captured ship
                            * [4] if 1 fighter is captured (show fighter captured text)
       .skip     0x01       | unused

ds_bug_collsn_hit_mult_9290:
       .skip     0x10       | hit-count/multiplier from collision manager, see d_scoreman_inc_lut

b_92A0:

ds3_frame_cts_92A0:
       .skip     0x03       | 3 bytes .... sub1:l_0537
* b8_92A3:
       .skip     0x01       | ship.dX_flag
* b16_92A4
       .skip     0x02       | each byte tracks a shot from the ship

* this group all related to tracking number of attackers during a stage
b_bugs_actv_cnt_92a6:
       .skip     0x01       | counts number of active bugs at each frame update (c_23E0)
b_bugs_actv_nbr_92a7:
       .skip     0x01       | total number of active bugs (global)
w_bug_flying_hit_cnt_92a8:
       .skip     0x02       | count down each flying bug hit (only relevant on challenge stg) only the lsb is used.
* b16_92AA
       .skip     0x01       | flag determines continuous bombing

       .skip     0x01       | unnused


* global game timer array
ds4_game_tmrs_92ac:
       .skip     0x04

b_92B0:
       .skip     0x02 * 8   | bomb X-rate
                            * accumulator for division remainder (f_bomb_position_updater_1ea4)

b_92C0:
* bomber activation timers (3 bytes) and init values (3 bytes)
       .skip     0x03
       .skip     0x01  | unused (force even alignment of following member)
       .skip     0x03
       .skip     0x01  | unused
       .skip     0x01
       .skip     0x01  | ?

bmbr_boss_pool_92ca:
* 12 bytes in 4 groups of 3 ... slots for boss+wing missions
       .skip     0x0C

b_CPU1_in_progress_92d6:
       .skip     0x01
b_CPU2_in_progress_92d7:
       .skip     0x01

       .skip     0x08       | unused

	.align	2
pb_attk_wav_IDs_92e0:
     .skip     0x02       | tmp ptr in c_25A2
b_92E2:
       .skip     0x01       | _stg_dat[0] e.g. *(26F4) ... c_25A2
       .skip     0x01       | _stg_dat[1] e.g. *(26F5) ... c_25A2, ld to 0x0f(ix)

       .skip     0x1C       | unused



		
* sprite position buffer and SFRs
ds_sprite_posn_9300:
mrw_sprite_posn_9300:
     .skip     0x40       | sprite position l (buffer)
     .skip     0x40       | sprite position h (buffer)
sfr_sprite_posn_9380:
     .skip     0x40       | sprite position l ("video" registers)
     .skip     0x40       | sprite position h ("video" registers)

		.skip	0x400


*=============================================================================
* RAM2
* Description:
*   $0400 bytes, $9800
*-----------------------------------------------------------------------------

*.area MRW (abs,ovr)
*.org $9800

ds_RAM2_9800:


* Pixel coordinates for object origin positions in the cylon fleet.
* (logical coordinates, source used to update sprite registers)
ds_hpos_spcoords_9800:

* 10 column coordinates, 6 row coordinates, 16-bits per coordinate.
       .skip     0x20


* see definitions in structs.inc
ds_plyr_data_9820:

ds_plyr_actv_9820:
       .skip     0x40
ds_plyr_susp_9860:
       .skip     0x40

       .skip     0x10       | unused

ds_susp_plyr_obj_data_98b0:
	.skip	0x30      | resv player game object status tokens (copied from 8800)
ds_cpu0_task_resrv_98e0:
       .skip     0x20


* home position locations for objects in the cylon fleet.
* 10 column coordinates, 6 row coordinates, 2-bytes per coordinate.

* even-bytes: offset of home-position coordinate relative to origin
ds_hpos_loc_offs_9900:

* odd-bytes: copy of origin data for access in CPU1 address space (i.e. bits <8:1> of precision coordinate)
ds_hpos_loc_orig_9900:
* struct for home position locations
       .skip     0x20


* bitmaps for setting up expand/contract motion of group (from defaults at 1E64)
ds10_9920:
       .skip     0x10

       .skip     0x50       | unused

ds_mchn_cfg_9980:

w_mchn_cfg_bonus_9980:
       .skip     0x02
b_mchn_cfg_nships_9982:
       .skip     0x01
b_mchn_cfg_cab_type_9983:
       .skip     0x01
b_mchn_cfg_rank_9984:
       .skip     0x01

       .skip     0x2B       | 9985-8F unused
                            * 9990-AF unused

* 2 bytes temp in hit-miss ratio calc
b16_tmp_99b0:

ds3_X3attackcfg_99b0:

b8_X3attackcfg_ct_99b0:
      .skip    1          | 3 count for X3 attacker
b8_X3attackcfg_parm0_99b1:
      .skip    1
b8_X3attackcfg_parm1_99b2:
      .skip    1
b8_two_plyr_game_99b3:
      .skip    1          | 0 for 1P, 1 for 2P
b8_bugnest_onoff_scrn_tmr_99b4:
      .skip    1
ds3_io_input_99b5:
      .skip    3          | see info in j_Test_menu_proc

b8_credit_cnt_99b8:
      .skip    1

ds_star_ctrl_99b9:
* 99B9: scroll_enable (1 when ship on screen, 0 if stop_scroll)
*_b_99BA
*_b_99BB

* 99BE: star_ctrl_state : value that gets passed to the h/w
      .skip    6

b8_ship_collsn_detectd_status_99bf:
      .skip    1

ds_new_stage_parms_99c0:
       .skip     0x0A       | each byte stores 1 nibble of bytes $0 thru $A of table dw_2C65[] (new stage)
       .skip     0x01       | bonus-bee when bug count reaches $0A (0 for challenge stage)

       .skip     0x15       | unused

ds20_99E0:
ds10_mchn_data_99e0:
b16_ttl_plays_bcd_99e0:
       .skip     0x02       | ttl plays bcd
b32_sum_score_bcd_99e2:
       .skip     0x04
b32_gametime_secs_bcd_99e6:
       .skip     0x04
b16_bonus_ct_bcd_99ea:
       .skip     0x02
       .skip     0x14       | unused


* cpu sub2 memory block ($100 bytes)

* one byte for every sound-effect structure ... sound_fx_status or count?
b_9A00:
       .skip     0x30
* one byte for every sound-effect structure... saves the current data index: sound_fx_idx
b_9A30:
       .skip     0x30
* tmp buffer for copy out values to sound hardware SFRs, frequency and volume SFRs
b_9A60:
       .skip     0x10       | $10 bytes copied to 6810 (frequency & volume SFRs)
b_9A70:
       .skip     0x03       | 00: voice 0 wave select
                            * 01: voice 1 wave select
                            * 02: voice 2 wave select
       .skip     0x01
       .skip     0x01       | 04: actv_snd_idx... index of sound currently being processed

       .skip     0x03       | 05: snd_parms_set[] ... current set of sound parameters copied from snd_parms_dat
                            *     [0] idx: sound effect index i.e. b_9A00[], b_9A00[$30] and selects pointer to p_snd_fx[] etc
                            *     [1] count: number of data pairs used by the sound effect data group in this time slice
                            *     [2] voice_select:
       .skip     0x01       | 08:
       .skip     0x01       | 09: global copy of count of additional credits-in since last update for triggering coiin-in sound
       .skip     0x02       | 0A: tmp pointer to sound-effect data in c_0550
       .skip     0x01       | 0C: voice 2 volume for capture beam
       .skip     0x01       | 0D: counter for wave-select (tractor beam)
       .skip     0x01       | 0E: counter, tracks voice 2 volume change ... capture beam
       .skip     0x01       | 0F: counter for wave-select (tractor beam)
b_9A80:
       .skip     0x01       | 00:
       .skip     0x01       | 01:
       .skip     0x02       | 02:
       .skip     0x02       | 04:
       .skip     0x02       | 06:
       .skip     0x03       | 08: sound_effect_parms ... 3 bytes from p_snd_fx[ 2 * snd_parms_set.idx ]
                            *  [0]:
                            *  [1]:
                            *  [2]: wave
       .skip     0x05       | unused
       .skip     0x10       | unused

ds_9AA0: | label for pointer+index operations
b_9AA0:
* Most of these registers function as a count/enable for individual sound effects
       .skip     0x01       | 00:  diving-attacks sound effects
       .skip     0x01       | 01:  blue-boss hit sound
       .skip     0x01       | 02:
       .skip     0x01       | 03:
       .skip     0x01       | 04:
       .skip     0x01       | 05:  capture beam sound active uno
       .skip     0x01       | 06:  capture beam sound active deux
       .skip     0x01       | 07:
       .skip     0x01       | 08:  count/enable register ... coin sound
       .skip     0x01       | 09:  ?
       .skip     0x01       | 0A:
       .skip     0x01       | 0B:
       .skip     0x01       | 0C:
       .skip     0x01       | 0D:
       .skip     0x01       | 0R:
       .skip     0x01       | 0F:
       .skip     0x01       | 10:
       .skip     0x01       | 11:  count/enable register ... rescued ship theme
       .skip     0x01       | 12:
       .skip     0x01       | 13:
       .skip     0x01       | 14:
       .skip     0x01       | 15: clicks for stage tokens
       .skip     0x01       | 16: sound mgr, hi-score dialog
       .skip     0x01       | 17: 0 ... enable CPU-sub2 process
       .skip     0x01       | 18: 1 ... skips CPUsub2 NMI if set (test variable?)
       .skip     0x01       | 19: !0 ... trigger "bang" sound
       .skip     0x06       | unused

* Many of these will correspond to _9AA0[] ... indicating if a particular sound is in process.
b_9AC0:
       .skip     0x20       | Active flags of each sound effect


       .skip     0x20       | unused




* sprite control buffer and SFRs (9B00)
* mrw & sfr HAVE to be contiguous even in the 68k version
* as game sometimes reads into sfr (to get previous value?) by adding
* 0x80 to the offset
ds_sprite_ctrl_9B00:

mrw_sprite_ctrl_9B00:
       .skip     0x40       | sprite control l (buffer)
       .skip     0x40       | sprite control h (buffer)

sfr_sprite_ctrl_9B80:
     .skip     0x40       | sprite control l ("video" registers)
     .skip     0x40       | sprite control h ("video" registers)

     
