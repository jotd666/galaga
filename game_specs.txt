HARDWARE SPRITES STRATEGY:

- using first 4 bitplanes for BOBs, with full palette dedicated to them, no
  dynamic colors possible (copperlist already too complicated)
- 1/2 HW sprites for ship
- 1 sprite for stars (takes a slot of 2 sprites!)

So:

- 2 slots for player ship
- 2 slots for captured ship (1 wasted)
- 2 slots for background stars (1 wasted, maybe 2 spare colors will be useful)
- 2 spare slots (their 3 spare colors are used for tiles)

TILES STRATEGY:

The tiles are scarce but their color model and placement often get in the way
of BOBs. It wastes a lot of time to try to refresh those tiles when a BOB passes
over some.

We noticed that
* when a line is colored, all chars are of the same color (notable
  exception: when entering high score, we'll handle that in a corner case,
  also notable exception: status bar on the bottom with lives & current stage flags
* chars are mostly mono-planar (except for flags & lives: 3 colors + black)
  
So we can:
- use an extra 5th plane only for letters, adjusting palette so mono-planar
  letters use only that plane.
- use a per-row (8 pixels) copper effect to change used colors dynamically like in Galaxian
- for multi-color tiles, use other planes, but manage to encode tiles
  on 2/3 bitplanes only so the colors used are 16 20 24 (sprites don't use them),
  which allow to display letters in different colors (highscore entering, special case)
  and also flags & life tiles
- hardware sprites can be used without color conflicts as we're using their transparent colors
  only (color 16, 20, 24... which have no effect on sprites)
- first 4 bitplanes can be used almost without conflicts. Just maybe redraw
  lives & flags each time or if sprite goes past them
- tractor beam are multi-color tiles, but the ship is a HW sprite so we get away with it
  (or we can systematically redraw them if they are present, once again corner cases)
- status tiles (lives & flags) use more than 1 clut on the same line, so we can't just use
  the 5th plane and get away with it. We generate full 5-bitplane tiles for them, and use some
  spare color slots that sprites don't use after color 16. There's a system to redraw the tiles
  on the left & right part, only if a BOB is in the area.
  

This allows to draw & erase BOBs without having to care about the background: better blitter speed!
Also handles tile/sprites colors, allowing to use 16 exclusive colors for BOBs, making
a 32 color game but with only 16 color blitter bandwidth.

For status bar, reserve ships (left) and stage flags (right) don't share the same colors, so
the copper color change at the start of the line doesn't work there. So we use BOBs palette plus
some spare colors above color 15 (not all hardware sprites are used) to allocate the missing colors,
and if needed we disable the copper writes on those 2 last rows


reuses part of the Galaxian port code for dynamic color rows, only with different colors

STARFIELD:

reuses the Galaxian port code, which multiplexes sprite 7 and changes positions so
it scrolls. Makes a pretty complex copperlist.

BOBS:

There's a lot happening on the screen, so better avoid blitting too much. Bees & moths are the BOBs that
occur the most on screen. All sprites use 3 colors + black. So it's better to rearrange the palette so 
those particular BOBs use only 2 bitplanes. This is done by chosing color order carefully. As a bonus,
we can also display bosses with 2 bitplanes, as color 4 is already blue. 4,8,12: 2 bitplanes!

Bees use indexes 0 (black) 1 (red) 2 (yellow) 3 (blue)
Moths uses indexes 0 (black) 1 (red) 4 (blue, duplicated) and 5 (light gray)
Boss with no armour 0 (black)        4 (blue)  8 (purple)  12 (pink)

By duplicating just one color, we display bees on planes 0 and 1, moths on planes 0 and 2 and bosses
(when hit once) on planes 2 and 3

Another trick is not to blit (zero cookie cut) the planes that are zeroed. It's obvious for bob erase, but
less so when it comes to draw it. But it saves some bandwidth and the result is barely noticeable as BOBs 
rarely superimpose.


